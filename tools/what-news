#!/usr/bin/env node

'use strict';

/* eslint-disable no-console */

const util = require('lodash');
const Path = require('path');
const fg = require('fast-glob');
const chalk = require('chalk');


const genGatherRule = (pkgName) => (rule, ctx) => {
    const {categories} = ctx;
    const ruleBaseDir = Path.join(__dirname, `../node_modules/${pkgName}/lib/rules/`);
    const {meta} = require(Path.join(ruleBaseDir, `${rule}.js`));

    const {category = '[category undefined]'} = meta.docs;
    if (!categories[category]) {
        categories[category] = [];
    }
    categories[category].push({rule, meta});
};

const printAddRules = (gatherRules, rules, myRuleNames) => {
    const ctx = {categories: {}};
    rules.forEach((rule) => gatherRules(rule, ctx));

    const adds = [];
    util.forOwn(ctx.categories, (rules, category) => {
        const addRules = [];
        rules.forEach(({rule, meta}) => {
            const {docs, deprecated, replacedBy} = meta;
            const {url = '[url undefined]', recommended = '[recommended undefined]'} = docs;

            let deprecatedTag = '';
            if (deprecated) {
                if (myRuleNames.includes(rule)) {
                    deprecatedTag = `[Deprecated][ReplacedBy ${replacedBy}]`;
                } else {
                    return;
                }
            }

            addRules.push(`  - '${rule}': ${deprecatedTag}${recommended} ${url}`);
        });

        adds.push([category, addRules]);
    });

    adds.forEach(([category, addRules]) => {
        const {length} = addRules;
        if (length > 0) {
            console.log(chalk.blue(`- ${category}`), chalk.green(`(${length})`));
            addRules.forEach((msg) => console.log(msg));
        }
    });
};

const pAdds = () => console.log(chalk.green(`\n[Added rules]`));
const pRemoves = (removes) => console.log(chalk.red(`\n[Removed rules] (${removes.length})`));
const p = (title) => console.log(chalk.bgWhite.black(`\n   ${title}   `));

async function eslintRules() {
    p('eslint');
    const name = 'eslint';
    const ruleBaseDir = Path.join(__dirname, `../node_modules/${name}/lib/rules/`);
    const entries = await fg([Path.join(ruleBaseDir, '*.js')]);
    const ruleNames = entries.map((x) => Path.basename(x, '.js'));

    const myRules = await fg([Path.join(__dirname, '../eslint_rules/*.js')]);
    const myRuleNames = [];
    myRules.forEach((path) => {
        const {rules} = require(path);
        util.forOwn(rules, (_, rule) => {
            myRuleNames.push(rule);
        });
    });

    const difference = util.xor(ruleNames, myRuleNames);
    const adds = util.intersection(ruleNames, difference);
    const removes = util.intersection(myRuleNames, difference);

    if (difference.length !== (adds.length + removes.length)) {
        console.log(`[Difference ${difference.length} rules]`);
        console.log(difference.join('\n'));
    }

    pAdds();
    printAddRules(genGatherRule(name), adds, myRuleNames);
    pRemoves(removes);
    removes.forEach((rule) => console.log(`  - ${rule}`));
}

const getDifference = (name) => async () => {
    p(`eslint-plugin-${name}`);
    const myPlugin = require(Path.join(__dirname, `../plugin/${name}.js`));
    if (!myPlugin.rules) {
        console.log(chalk.gray('No rules'));
        return;
    }
    const myRuleNames = Object.keys(myPlugin.rules).map((rule) => rule.replace(new RegExp(`^${name}\/`), ''));

    const rules = await fg([Path.join(__dirname, `../node_modules/eslint-plugin-${name}/lib/rules/*.js`)]);
    const ruleNames = rules.map((path) => {
        return Path.basename(path, '.js');
    });

    const difference = util.xor(ruleNames, myRuleNames);
    const adds = util.intersection(ruleNames, difference);
    const removes = util.intersection(myRuleNames, difference);

    pAdds();
    printAddRules(genGatherRule(`eslint-plugin-${name}`), adds, myRuleNames);
    pRemoves(removes);
    removes.forEach((rule) => console.log(`  - ${rule}`));
}

async function run() {
    await eslintRules();
    await getDifference('jsx-a11y')();
    await getDifference('react')();
    await getDifference('import')();
    await getDifference('babel')();
}

run().catch((error) => {
    console.error(error);
    process.exit(1);
});
